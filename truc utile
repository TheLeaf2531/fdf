
void	draw_line(t_vector2 start, t_vector2 end, void *win_ptr, void *mlx_ptr)
{
	t_vector2	s;
	t_vector2	d;
	int			err;
	int			err_2;

	d.x = abs(end.x - start.x);
	d.y = abs(end.y - start.y);
	s.x = start.x < end.x ? 1 : -1;
	s.y = start.y < end.y ? 1 : -1;
	err = (d.x > d.y ? d.x : -d.y) / 2;
	while (start.x != end.x && start.y != end.y)
	{
		mlx_pixel_put(mlx_ptr, win_ptr, start.x, start.y, 0xFFFFFF);
		err_2 = err;
		if (err_2 > -d.x)
		{
			err -= d.y;
			start.x += s.x;
		}
		if (err_2 < d.y)
		{
			err += d.x;
			start.y += s.y;
		}
	}
}


t_matrix4	test_inverse(t_matrix4 m)
{
	double coef = 1 / m4_determinant(m);
	t_matrix4 inv = (t_matrix4){
	m.t[1][2]*m.t[2][3]*m.t[3][1] - m.t[1][3]*m.t[2][2]*m.t[3][1] +m.t[1][3]*m.t[2][1]*m.t[3][2] - m.t[1][1]*m.t[2][3]*m.t[3][2] - m.t[1][2]*m.t[2][1]*m.t[3][3] + m.t[1][1]*m.t[2][2]*m.t[3][3],
	m.t[0][3]*m.t[2][2]*m.t[3][1] - m.t[0][2]*m.t[2][3]*m.t[3][1] - m.t[0][3]*m.t[2][1]*m.t[3][2] + m.t[0][1]*m.t[2][3]*m.t[3][2] + m.t[0][2]*m.t[2][1]*m.t[3][3] - m.t[0][1]*m.t[2][2]*m.t[3][3],
	m.t[0][2]*m.t[1][3]*m.t[3][1] - m.t[0][3]*m.t[1][2]*m.t[3][1] + m.t[0][3]*m.t[1][1]*m.t[3][2] - m.t[0][1]*m.t[1][3]*m.t[3][2] - m.t[0][2]*m.t[1][1]*m.t[3][3] + m.t[0][1]*m.t[1][2]*m.t[3][3],
	m.t[0][3]*m.t[1][2]*m.t[2][1] - m.t[0][2]*m.t[1][3]*m.t[2][1] - m.t[0][3]*m.t[1][1]*m.t[2][2] + m.t[0][1]*m.t[1][3]*m.t[2][2] + m.t[0][2]*m.t[1][1]*m.t[2][3] - m.t[0][1]*m.t[1][2]*m.t[2][3],
	m.t[1][3]*m.t[2][2]*m.t[3][0] - m.t[1][2]*m.t[2][3]*m.t[3][0] - m.t[1][3]*m.t[2][0]*m.t[3][2] + m.t[1][0]*m.t[2][3]*m.t[3][2] + m.t[1][2]*m.t[2][0]*m.t[3][3] - m.t[1][0]*m.t[2][2]*m.t[3][3],
	m.t[0][2]*m.t[2][3]*m.t[3][0] - m.t[0][3]*m.t[2][2]*m.t[3][0] + m.t[0][3]*m.t[2][0]*m.t[3][2] - m.t[0][0]*m.t[2][3]*m.t[3][2] - m.t[0][2]*m.t[2][0]*m.t[3][3] + m.t[0][0]*m.t[2][2]*m.t[3][3],
	m.t[0][3]*m.t[1][2]*m.t[3][0] - m.t[0][2]*m.t[1][3]*m.t[3][0] - m.t[0][3]*m.t[1][0]*m.t[3][2] + m.t[0][0]*m.t[1][3]*m.t[3][2] + m.t[0][2]*m.t[1][0]*m.t[3][3] - m.t[0][0]*m.t[1][2]*m.t[3][3],
	m.t[0][2]*m.t[1][3]*m.t[2][0] - m.t[0][3]*m.t[1][2]*m.t[2][0] + m.t[0][3]*m.t[1][0]*m.t[2][2] - m.t[0][0]*m.t[1][3]*m.t[2][2] - m.t[0][2]*m.t[1][0]*m.t[2][3] + m.t[0][0]*m.t[1][2]*m.t[2][3],
	m.t[1][1]*m.t[2][3]*m.t[3][0] - m.t[1][3]*m.t[2][1]*m.t[3][0] + m.t[1][3]*m.t[2][0]*m.t[3][1] - m.t[1][0]*m.t[2][3]*m.t[3][1] - m.t[1][1]*m.t[2][0]*m.t[3][3] + m.t[1][0]*m.t[2][1]*m.t[3][3],
	m.t[0][3]*m.t[2][1]*m.t[3][0] - m.t[0][1]*m.t[2][3]*m.t[3][0] - m.t[0][3]*m.t[2][0]*m.t[3][1] + m.t[0][0]*m.t[2][3]*m.t[3][1] + m.t[0][1]*m.t[2][0]*m.t[3][3] - m.t[0][0]*m.t[2][1]*m.t[3][3],
	m.t[0][1]*m.t[1][3]*m.t[3][0] - m.t[0][3]*m.t[1][1]*m.t[3][0] + m.t[0][3]*m.t[1][0]*m.t[3][1] - m.t[0][0]*m.t[1][3]*m.t[3][1] - m.t[0][1]*m.t[1][0]*m.t[3][3] + m.t[0][0]*m.t[1][1]*m.t[3][3],
	m.t[0][3]*m.t[1][1]*m.t[2][0] - m.t[0][1]*m.t[1][3]*m.t[2][0] - m.t[0][3]*m.t[1][0]*m.t[2][1] + m.t[0][0]*m.t[1][3]*m.t[2][1] + m.t[0][1]*m.t[1][0]*m.t[2][3] - m.t[0][0]*m.t[1][1]*m.t[2][3],
	m.t[1][2]*m.t[2][1]*m.t[3][0] - m.t[1][1]*m.t[2][2]*m.t[3][0] - m.t[1][2]*m.t[2][0]*m.t[3][1] + m.t[1][0]*m.t[2][2]*m.t[3][1] + m.t[1][1]*m.t[2][0]*m.t[3][2] - m.t[1][0]*m.t[2][1]*m.t[3][2],
	m.t[0][1]*m.t[2][2]*m.t[3][0] - m.t[0][2]*m.t[2][1]*m.t[3][0] + m.t[0][2]*m.t[2][0]*m.t[3][1] - m.t[0][0]*m.t[2][2]*m.t[3][1] - m.t[0][1]*m.t[2][0]*m.t[3][2] + m.t[0][0]*m.t[2][1]*m.t[3][2],
	m.t[0][2]*m.t[1][1]*m.t[3][0] - m.t[0][1]*m.t[1][2]*m.t[3][0] - m.t[0][2]*m.t[1][0]*m.t[3][1] + m.t[0][0]*m.t[1][2]*m.t[3][1] + m.t[0][1]*m.t[1][0]*m.t[3][2] - m.t[0][0]*m.t[1][1]*m.t[3][2],
	m.t[0][1]*m.t[1][2]*m.t[2][0] - m.t[0][2]*m.t[1][1]*m.t[2][0] + m.t[0][2]*m.t[1][0]*m.t[2][1] - m.t[0][0]*m.t[1][2]*m.t[2][1] - m.t[0][1]*m.t[1][0]*m.t[2][2] + m.t[0][0]*m.t[1][1]*m.t[2][2]
	};
	return ((t_matrix4){
		inv.t[0][0] * coef, inv.t[0][1] * coef, inv.t[0][2] * coef, inv.t[0][3] * coef,
		inv.t[1][0] * coef, inv.t[1][1] * coef, inv.t[1][2] * coef, inv.t[1][3] * coef,
		inv.t[2][0] * coef, inv.t[2][1] * coef, inv.t[2][2] * coef, inv.t[2][3] * coef,
		inv.t[3][0] * coef, inv.t[3][1] * coef, inv.t[3][2] * coef, inv.t[3][3] * coef
	});
}